// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Athena {

    public enum ColumnNullable: String, CustomStringConvertible, Codable {
        case notNull = "NOT_NULL"
        case nullable = "NULLABLE"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public struct ListNamedQueriesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token that specifies where to start pagination if a previous request was truncated.
        public let nextToken: String?
        /// The maximum number of queries to return in this request.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct StopQueryExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutionId", required: true, type: .string)
        ]
        /// The unique ID of the query execution to stop.
        public let queryExecutionId: String

        public init(queryExecutionId: String) {
            self.queryExecutionId = queryExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutionId = "QueryExecutionId"
        }
    }

    public struct BatchGetNamedQueryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamedQueries", required: false, type: .list), 
            AWSShapeMember(label: "UnprocessedNamedQueryIds", required: false, type: .list)
        ]
        /// Information about the named query IDs submitted.
        public let namedQueries: [NamedQuery]?
        /// Information about provided query IDs.
        public let unprocessedNamedQueryIds: [UnprocessedNamedQueryId]?

        public init(namedQueries: [NamedQuery]? = nil, unprocessedNamedQueryIds: [UnprocessedNamedQueryId]? = nil) {
            self.namedQueries = namedQueries
            self.unprocessedNamedQueryIds = unprocessedNamedQueryIds
        }

        private enum CodingKeys: String, CodingKey {
            case namedQueries = "NamedQueries"
            case unprocessedNamedQueryIds = "UnprocessedNamedQueryIds"
        }
    }

    public struct ResultConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputLocation", required: true, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure)
        ]
        /// The location in S3 where query results are stored.
        public let outputLocation: String
        /// If query results are encrypted in S3, indicates the S3 encryption option used (for example, SSE-KMS or CSE-KMS and key information.
        public let encryptionConfiguration: EncryptionConfiguration?

        public init(outputLocation: String, encryptionConfiguration: EncryptionConfiguration? = nil) {
            self.outputLocation = outputLocation
            self.encryptionConfiguration = encryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case outputLocation = "OutputLocation"
            case encryptionConfiguration = "EncryptionConfiguration"
        }
    }

    public struct ListQueryExecutionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutionIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The unique IDs of each query execution as an array of strings.
        public let queryExecutionIds: [String]?
        /// A token to be used by the next request if this request is truncated.
        public let nextToken: String?

        public init(queryExecutionIds: [String]? = nil, nextToken: String? = nil) {
            self.queryExecutionIds = queryExecutionIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutionIds = "QueryExecutionIds"
            case nextToken = "NextToken"
        }
    }

    public struct GetNamedQueryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamedQuery", required: false, type: .structure)
        ]
        /// Information about the query.
        public let namedQuery: NamedQuery?

        public init(namedQuery: NamedQuery? = nil) {
            self.namedQuery = namedQuery
        }

        private enum CodingKeys: String, CodingKey {
            case namedQuery = "NamedQuery"
        }
    }

    public struct StartQueryExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResultConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "QueryString", required: true, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "QueryExecutionContext", required: false, type: .structure)
        ]
        /// Specifies information about where and how to save the results of the query execution.
        public let resultConfiguration: ResultConfiguration
        /// The SQL query statements to be executed.
        public let queryString: String
        /// A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another StartQueryExecution request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the QueryString, an error is returned.  This token is listed as not required because AWS SDKs (for example the AWS SDK for Java) auto-generate the token for users. If you are not using the AWS SDK or the AWS CLI, you must provide this token or the action will fail. 
        public let clientRequestToken: String?
        /// The database within which the query executes.
        public let queryExecutionContext: QueryExecutionContext?

        public init(resultConfiguration: ResultConfiguration, queryString: String, clientRequestToken: String? = nil, queryExecutionContext: QueryExecutionContext? = nil) {
            self.resultConfiguration = resultConfiguration
            self.queryString = queryString
            self.clientRequestToken = clientRequestToken
            self.queryExecutionContext = queryExecutionContext
        }

        private enum CodingKeys: String, CodingKey {
            case resultConfiguration = "ResultConfiguration"
            case queryString = "QueryString"
            case clientRequestToken = "ClientRequestToken"
            case queryExecutionContext = "QueryExecutionContext"
        }
    }

    public struct CreateNamedQueryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamedQueryId", required: false, type: .string)
        ]
        /// The unique ID of the query.
        public let namedQueryId: String?

        public init(namedQueryId: String? = nil) {
            self.namedQueryId = namedQueryId
        }

        private enum CodingKeys: String, CodingKey {
            case namedQueryId = "NamedQueryId"
        }
    }

    public struct UnprocessedQueryExecutionId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "QueryExecutionId", required: false, type: .string)
        ]
        /// The error message returned when the query execution failed to process, if applicable.
        public let errorMessage: String?
        /// The error code returned when the query execution failed to process, if applicable.
        public let errorCode: String?
        /// The unique identifier of the query execution.
        public let queryExecutionId: String?

        public init(errorMessage: String? = nil, errorCode: String? = nil, queryExecutionId: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.queryExecutionId = queryExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case queryExecutionId = "QueryExecutionId"
        }
    }

    public struct ResultSetMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ColumnInfo", required: false, type: .list)
        ]
        /// Information about the columns in a query execution result.
        public let columnInfo: [ColumnInfo]?

        public init(columnInfo: [ColumnInfo]? = nil) {
            self.columnInfo = columnInfo
        }

        private enum CodingKeys: String, CodingKey {
            case columnInfo = "ColumnInfo"
        }
    }

    public struct GetQueryExecutionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecution", required: false, type: .structure)
        ]
        /// Information about the query execution.
        public let queryExecution: QueryExecution?

        public init(queryExecution: QueryExecution? = nil) {
            self.queryExecution = queryExecution
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecution = "QueryExecution"
        }
    }

    public struct BatchGetQueryExecutionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutions", required: false, type: .list), 
            AWSShapeMember(label: "UnprocessedQueryExecutionIds", required: false, type: .list)
        ]
        /// Information about a query execution.
        public let queryExecutions: [QueryExecution]?
        /// Information about the query executions that failed to run.
        public let unprocessedQueryExecutionIds: [UnprocessedQueryExecutionId]?

        public init(queryExecutions: [QueryExecution]? = nil, unprocessedQueryExecutionIds: [UnprocessedQueryExecutionId]? = nil) {
            self.queryExecutions = queryExecutions
            self.unprocessedQueryExecutionIds = unprocessedQueryExecutionIds
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutions = "QueryExecutions"
            case unprocessedQueryExecutionIds = "UnprocessedQueryExecutionIds"
        }
    }

    public enum QueryExecutionState: String, CustomStringConvertible, Codable {
        case queued = "QUEUED"
        case running = "RUNNING"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case cancelled = "CANCELLED"
        public var description: String { return self.rawValue }
    }

    public struct StartQueryExecutionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutionId", required: false, type: .string)
        ]
        /// The unique ID of the query that ran as a result of this request.
        public let queryExecutionId: String?

        public init(queryExecutionId: String? = nil) {
            self.queryExecutionId = queryExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutionId = "QueryExecutionId"
        }
    }

    public struct ResultSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rows", required: false, type: .list), 
            AWSShapeMember(label: "ResultSetMetadata", required: false, type: .structure)
        ]
        /// The rows in the table.
        public let rows: [Row]?
        /// The metadata that describes the column structure and data types of a table of query results.
        public let resultSetMetadata: ResultSetMetadata?

        public init(rows: [Row]? = nil, resultSetMetadata: ResultSetMetadata? = nil) {
            self.rows = rows
            self.resultSetMetadata = resultSetMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case rows = "Rows"
            case resultSetMetadata = "ResultSetMetadata"
        }
    }

    public struct GetQueryResultsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResultSet", required: false, type: .structure)
        ]
        /// A token to be used by the next request if this request is truncated.
        public let nextToken: String?
        /// The results of the query execution.
        public let resultSet: ResultSet?

        public init(nextToken: String? = nil, resultSet: ResultSet? = nil) {
            self.nextToken = nextToken
            self.resultSet = resultSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resultSet = "ResultSet"
        }
    }

    public struct ColumnInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Nullable", required: false, type: .enum), 
            AWSShapeMember(label: "CatalogName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Precision", required: false, type: .integer), 
            AWSShapeMember(label: "TableName", required: false, type: .string), 
            AWSShapeMember(label: "Scale", required: false, type: .integer), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "CaseSensitive", required: false, type: .boolean), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        /// Indicates the column's nullable status.
        public let nullable: ColumnNullable?
        /// The catalog to which the query results belong.
        public let catalogName: String?
        /// The schema name (database name) to which the query results belong.
        public let schemaName: String?
        /// The name of the column.
        public let name: String
        /// For DECIMAL data types, specifies the total number of digits, up to 38. For performance reasons, we recommend up to 18 digits.
        public let precision: Int32?
        /// The table name for the query results.
        public let tableName: String?
        /// For DECIMAL data types, specifies the total number of digits in the fractional part of the value. Defaults to 0.
        public let scale: Int32?
        /// The data type of the column.
        public let `type`: String
        /// Indicates whether values in the column are case-sensitive.
        public let caseSensitive: Bool?
        /// A column label.
        public let label: String?

        public init(nullable: ColumnNullable? = nil, catalogName: String? = nil, schemaName: String? = nil, name: String, precision: Int32? = nil, tableName: String? = nil, scale: Int32? = nil, type: String, caseSensitive: Bool? = nil, label: String? = nil) {
            self.nullable = nullable
            self.catalogName = catalogName
            self.schemaName = schemaName
            self.name = name
            self.precision = precision
            self.tableName = tableName
            self.scale = scale
            self.`type` = `type`
            self.caseSensitive = caseSensitive
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case nullable = "Nullable"
            case catalogName = "CatalogName"
            case schemaName = "SchemaName"
            case name = "Name"
            case precision = "Precision"
            case tableName = "TableName"
            case scale = "Scale"
            case `type` = "Type"
            case caseSensitive = "CaseSensitive"
            case label = "Label"
        }
    }

    public struct StopQueryExecutionOutput: AWSShape {

    }

    public struct Row: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Data", required: false, type: .list)
        ]
        /// The data that populates a row in a query result table.
        public let data: [Datum]?

        public init(data: [Datum]? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "Data"
        }
    }

    public enum ThrottleReason: String, CustomStringConvertible, Codable {
        case concurrentQueryLimitExceeded = "CONCURRENT_QUERY_LIMIT_EXCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct GetNamedQueryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamedQueryId", required: true, type: .string)
        ]
        /// The unique ID of the query. Use ListNamedQueries to get query IDs.
        public let namedQueryId: String

        public init(namedQueryId: String) {
            self.namedQueryId = namedQueryId
        }

        private enum CodingKeys: String, CodingKey {
            case namedQueryId = "NamedQueryId"
        }
    }

    public enum EncryptionOption: String, CustomStringConvertible, Codable {
        case sseS3 = "SSE_S3"
        case sseKms = "SSE_KMS"
        case cseKms = "CSE_KMS"
        public var description: String { return self.rawValue }
    }

    public struct Datum: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VarCharValue", required: false, type: .string)
        ]
        /// The value of the datum.
        public let varCharValue: String?

        public init(varCharValue: String? = nil) {
            self.varCharValue = varCharValue
        }

        private enum CodingKeys: String, CodingKey {
            case varCharValue = "VarCharValue"
        }
    }

    public struct UnprocessedNamedQueryId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "NamedQueryId", required: false, type: .string)
        ]
        /// The error message returned when the processing request for the named query failed, if applicable.
        public let errorMessage: String?
        /// The error code returned when the processing request for the named query failed, if applicable.
        public let errorCode: String?
        /// The unique identifier of the named query.
        public let namedQueryId: String?

        public init(errorMessage: String? = nil, errorCode: String? = nil, namedQueryId: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.namedQueryId = namedQueryId
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case namedQueryId = "NamedQueryId"
        }
    }

    public struct NamedQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "QueryString", required: true, type: .string), 
            AWSShapeMember(label: "NamedQueryId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Database", required: true, type: .string)
        ]
        /// A brief description of the query.
        public let description: String?
        /// The SQL query statements that comprise the query.
        public let queryString: String
        /// The unique identifier of the query.
        public let namedQueryId: String?
        /// The plain-language name of the query.
        public let name: String
        /// The database to which the query belongs.
        public let database: String

        public init(description: String? = nil, queryString: String, namedQueryId: String? = nil, name: String, database: String) {
            self.description = description
            self.queryString = queryString
            self.namedQueryId = namedQueryId
            self.name = name
            self.database = database
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case queryString = "QueryString"
            case namedQueryId = "NamedQueryId"
            case name = "Name"
            case database = "Database"
        }
    }

    public struct GetQueryExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutionId", required: true, type: .string)
        ]
        /// The unique ID of the query execution.
        public let queryExecutionId: String

        public init(queryExecutionId: String) {
            self.queryExecutionId = queryExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutionId = "QueryExecutionId"
        }
    }

    public struct ListQueryExecutionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token that specifies where to start pagination if a previous request was truncated.
        public let nextToken: String?
        /// The maximum number of query executions to return in this request.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchGetQueryExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutionIds", required: true, type: .list)
        ]
        /// An array of query execution IDs.
        public let queryExecutionIds: [String]

        public init(queryExecutionIds: [String]) {
            self.queryExecutionIds = queryExecutionIds
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutionIds = "QueryExecutionIds"
        }
    }

    public struct DeleteNamedQueryOutput: AWSShape {

    }

    public struct CreateNamedQueryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryString", required: true, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Database", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The text of the query itself. In other words, all query statements.
        public let queryString: String
        /// A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another CreateNamedQuery request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the QueryString, an error is returned.  This token is listed as not required because AWS SDKs (for example the AWS SDK for Java) auto-generate the token for users. If you are not using the AWS SDK or the AWS CLI, you must provide this token or the action will fail. 
        public let clientRequestToken: String?
        /// The plain language name for the query.
        public let name: String
        /// The database to which the query belongs.
        public let database: String
        /// A brief explanation of the query.
        public let description: String?

        public init(queryString: String, clientRequestToken: String? = nil, name: String, database: String, description: String? = nil) {
            self.queryString = queryString
            self.clientRequestToken = clientRequestToken
            self.name = name
            self.database = database
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case queryString = "QueryString"
            case clientRequestToken = "ClientRequestToken"
            case name = "Name"
            case database = "Database"
            case description = "Description"
        }
    }

    public struct GetQueryResultsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryExecutionId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The unique ID of the query execution.
        public let queryExecutionId: String
        /// The token that specifies where to start pagination if a previous request was truncated.
        public let nextToken: String?
        /// The maximum number of results (rows) to return in this request.
        public let maxResults: Int32?

        public init(queryExecutionId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.queryExecutionId = queryExecutionId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case queryExecutionId = "QueryExecutionId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct QueryExecutionStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineExecutionTimeInMillis", required: false, type: .long), 
            AWSShapeMember(label: "DataScannedInBytes", required: false, type: .long)
        ]
        /// The number of milliseconds that the query took to execute.
        public let engineExecutionTimeInMillis: Int64?
        /// The number of bytes in the data that was queried.
        public let dataScannedInBytes: Int64?

        public init(engineExecutionTimeInMillis: Int64? = nil, dataScannedInBytes: Int64? = nil) {
            self.engineExecutionTimeInMillis = engineExecutionTimeInMillis
            self.dataScannedInBytes = dataScannedInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case engineExecutionTimeInMillis = "EngineExecutionTimeInMillis"
            case dataScannedInBytes = "DataScannedInBytes"
        }
    }

    public struct ListNamedQueriesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NamedQueryIds", required: false, type: .list)
        ]
        /// A token to be used by the next request if this request is truncated.
        public let nextToken: String?
        /// The list of unique query IDs.
        public let namedQueryIds: [String]?

        public init(nextToken: String? = nil, namedQueryIds: [String]? = nil) {
            self.nextToken = nextToken
            self.namedQueryIds = namedQueryIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case namedQueryIds = "NamedQueryIds"
        }
    }

    public struct QueryExecutionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "CompletionDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "SubmissionDateTime", required: false, type: .timestamp)
        ]
        /// Further detail about the status of the query.
        public let stateChangeReason: String?
        /// The date and time that the query completed.
        public let completionDateTime: TimeStamp?
        /// The state of query execution. SUBMITTED indicates that the query is queued for execution. RUNNING indicates that the query is scanning data and returning results. SUCCEEDED indicates that the query completed without error. FAILED indicates that the query experienced an error and did not complete processing. CANCELLED indicates that user input interrupted query execution.
        public let state: QueryExecutionState?
        /// The date and time that the query was submitted.
        public let submissionDateTime: TimeStamp?

        public init(stateChangeReason: String? = nil, completionDateTime: TimeStamp? = nil, state: QueryExecutionState? = nil, submissionDateTime: TimeStamp? = nil) {
            self.stateChangeReason = stateChangeReason
            self.completionDateTime = completionDateTime
            self.state = state
            self.submissionDateTime = submissionDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case stateChangeReason = "StateChangeReason"
            case completionDateTime = "CompletionDateTime"
            case state = "State"
            case submissionDateTime = "SubmissionDateTime"
        }
    }

    public struct BatchGetNamedQueryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamedQueryIds", required: true, type: .list)
        ]
        /// An array of query IDs.
        public let namedQueryIds: [String]

        public init(namedQueryIds: [String]) {
            self.namedQueryIds = namedQueryIds
        }

        private enum CodingKeys: String, CodingKey {
            case namedQueryIds = "NamedQueryIds"
        }
    }

    public struct DeleteNamedQueryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamedQueryId", required: true, type: .string)
        ]
        /// The unique ID of the query to delete.
        public let namedQueryId: String

        public init(namedQueryId: String) {
            self.namedQueryId = namedQueryId
        }

        private enum CodingKeys: String, CodingKey {
            case namedQueryId = "NamedQueryId"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionOption", required: true, type: .enum), 
            AWSShapeMember(label: "KmsKey", required: false, type: .string)
        ]
        /// Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.
        public let encryptionOption: EncryptionOption
        /// For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID.
        public let kmsKey: String?

        public init(encryptionOption: EncryptionOption, kmsKey: String? = nil) {
            self.encryptionOption = encryptionOption
            self.kmsKey = kmsKey
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionOption = "EncryptionOption"
            case kmsKey = "KmsKey"
        }
    }

    public struct QueryExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResultConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Query", required: false, type: .string), 
            AWSShapeMember(label: "QueryExecutionContext", required: false, type: .structure), 
            AWSShapeMember(label: "Statistics", required: false, type: .structure), 
            AWSShapeMember(label: "QueryExecutionId", required: false, type: .string)
        ]
        /// The location in Amazon S3 where query results were stored and the encryption option, if any, used for query results.
        public let resultConfiguration: ResultConfiguration?
        /// The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
        public let status: QueryExecutionStatus?
        /// The SQL query statements which the query execution ran.
        public let query: String?
        /// The database in which the query execution occurred.
        public let queryExecutionContext: QueryExecutionContext?
        /// The amount of data scanned during the query execution and the amount of time that it took to execute.
        public let statistics: QueryExecutionStatistics?
        /// The unique identifier for each query execution.
        public let queryExecutionId: String?

        public init(resultConfiguration: ResultConfiguration? = nil, status: QueryExecutionStatus? = nil, query: String? = nil, queryExecutionContext: QueryExecutionContext? = nil, statistics: QueryExecutionStatistics? = nil, queryExecutionId: String? = nil) {
            self.resultConfiguration = resultConfiguration
            self.status = status
            self.query = query
            self.queryExecutionContext = queryExecutionContext
            self.statistics = statistics
            self.queryExecutionId = queryExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case resultConfiguration = "ResultConfiguration"
            case status = "Status"
            case query = "Query"
            case queryExecutionContext = "QueryExecutionContext"
            case statistics = "Statistics"
            case queryExecutionId = "QueryExecutionId"
        }
    }

    public struct QueryExecutionContext: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Database", required: false, type: .string)
        ]
        /// The name of the database.
        public let database: String?

        public init(database: String? = nil) {
            self.database = database
        }

        private enum CodingKeys: String, CodingKey {
            case database = "Database"
        }
    }

}